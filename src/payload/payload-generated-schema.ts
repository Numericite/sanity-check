/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import type {} from "@payloadcms/db-postgres";
import {
  pgTable,
  index,
  uniqueIndex,
  foreignKey,
  serial,
  varchar,
  integer,
  boolean,
  jsonb,
  timestamp,
  numeric,
} from "@payloadcms/db-postgres/drizzle/pg-core";
import { sql, relations } from "@payloadcms/db-postgres/drizzle";

export const tools = pgTable(
  "tools",
  {
    id: serial("id").primaryKey(),
    name: varchar("name").notNull(),
    site_link: varchar("site_link").notNull(),
    image_link: integer("image_link_id").references(() => media.id, {
      onDelete: "set null",
    }),
    description: varchar("description"),
    enterprise_certifications: varchar("enterprise_certifications"),
    data_access: varchar("data_access"),
    subcontractors: varchar("subcontractors"),
    transfer_out_eu: varchar("transfer_out_eu"),
    privacy_score_saas: varchar("privacy_score_saas"),
    privacy_score_self_hosted: varchar("privacy_score_self_hosted"),
    tool_kind: varchar("tool_kind"),
    location_host_client: varchar("location_host_client"),
    online_accessible_dpa: varchar("online_accessible_dpa"),
    subcontractors_infra: varchar("subcontractors_infra"),
    certification_dpf: boolean("certification_dpf"),
    opensource: varchar("opensource"),
    self_host_possibility: varchar("self_host_possibility"),
    fr_documentation: varchar("fr_documentation"),
    dpa_compliant: varchar("dpa_compliant"),
    subkind: varchar("subkind"),
    rgpd_feature: varchar("rgpd_feature"),
    transfer_supervision: varchar("transfer_supervision"),
    enterprise_location: varchar("enterprise_location"),
    dpa_link: varchar("dpa_link"),
    subcontractors_certifications: varchar("subcontractors_certifications"),
    enterprise_european: varchar("enterprise_european"),
    final_users_location: varchar("final_users_location"),
    actions: jsonb("actions"),
    location_note: jsonb("location_note"),
    transfer_informations: varchar("transfer_informations"),
    dpa_file: integer("dpa_file_id").references(() => media.id, {
      onDelete: "set null",
    }),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    tools_image_link_idx: index("tools_image_link_idx").on(columns.image_link),
    tools_dpa_file_idx: index("tools_dpa_file_idx").on(columns.dpa_file),
    tools_updated_at_idx: index("tools_updated_at_idx").on(columns.updatedAt),
    tools_created_at_idx: index("tools_created_at_idx").on(columns.createdAt),
  }),
);

export const _tools_v = pgTable(
  "_tools_v",
  {
    id: serial("id").primaryKey(),
    parent: integer("parent_id").references(() => tools.id, {
      onDelete: "set null",
    }),
    version_name: varchar("version_name").notNull(),
    version_site_link: varchar("version_site_link").notNull(),
    version_image_link: integer("version_image_link_id").references(
      () => media.id,
      {
        onDelete: "set null",
      },
    ),
    version_description: varchar("version_description"),
    version_enterprise_certifications: varchar(
      "version_enterprise_certifications",
    ),
    version_data_access: varchar("version_data_access"),
    version_subcontractors: varchar("version_subcontractors"),
    version_transfer_out_eu: varchar("version_transfer_out_eu"),
    version_privacy_score_saas: varchar("version_privacy_score_saas"),
    version_privacy_score_self_hosted: varchar(
      "version_privacy_score_self_hosted",
    ),
    version_tool_kind: varchar("version_tool_kind"),
    version_location_host_client: varchar("version_location_host_client"),
    version_online_accessible_dpa: varchar("version_online_accessible_dpa"),
    version_subcontractors_infra: varchar("version_subcontractors_infra"),
    version_certification_dpf: boolean("version_certification_dpf"),
    version_opensource: varchar("version_opensource"),
    version_self_host_possibility: varchar("version_self_host_possibility"),
    version_fr_documentation: varchar("version_fr_documentation"),
    version_dpa_compliant: varchar("version_dpa_compliant"),
    version_subkind: varchar("version_subkind"),
    version_rgpd_feature: varchar("version_rgpd_feature"),
    version_transfer_supervision: varchar("version_transfer_supervision"),
    version_enterprise_location: varchar("version_enterprise_location"),
    version_dpa_link: varchar("version_dpa_link"),
    version_subcontractors_certifications: varchar(
      "version_subcontractors_certifications",
    ),
    version_enterprise_european: varchar("version_enterprise_european"),
    version_final_users_location: varchar("version_final_users_location"),
    version_actions: jsonb("version_actions"),
    version_location_note: jsonb("version_location_note"),
    version_transfer_informations: varchar("version_transfer_informations"),
    version_dpa_file: integer("version_dpa_file_id").references(
      () => media.id,
      {
        onDelete: "set null",
      },
    ),
    version_updatedAt: timestamp("version_updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp("version_created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    _tools_v_parent_idx: index("_tools_v_parent_idx").on(columns.parent),
    _tools_v_version_version_image_link_idx: index(
      "_tools_v_version_version_image_link_idx",
    ).on(columns.version_image_link),
    _tools_v_version_version_dpa_file_idx: index(
      "_tools_v_version_version_dpa_file_idx",
    ).on(columns.version_dpa_file),
    _tools_v_version_version_updated_at_idx: index(
      "_tools_v_version_version_updated_at_idx",
    ).on(columns.version_updatedAt),
    _tools_v_version_version_created_at_idx: index(
      "_tools_v_version_version_created_at_idx",
    ).on(columns.version_createdAt),
    _tools_v_created_at_idx: index("_tools_v_created_at_idx").on(
      columns.createdAt,
    ),
    _tools_v_updated_at_idx: index("_tools_v_updated_at_idx").on(
      columns.updatedAt,
    ),
  }),
);

export const media = pgTable(
  "media",
  {
    id: serial("id").primaryKey(),
    alt: varchar("alt").notNull(),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    url: varchar("url"),
    thumbnailURL: varchar("thumbnail_u_r_l"),
    filename: varchar("filename"),
    mimeType: varchar("mime_type"),
    filesize: numeric("filesize"),
    width: numeric("width"),
    height: numeric("height"),
    focalX: numeric("focal_x"),
    focalY: numeric("focal_y"),
  },
  (columns) => ({
    media_updated_at_idx: index("media_updated_at_idx").on(columns.updatedAt),
    media_created_at_idx: index("media_created_at_idx").on(columns.createdAt),
    media_filename_idx: uniqueIndex("media_filename_idx").on(columns.filename),
  }),
);

export const users_sessions = pgTable(
  "users_sessions",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    expiresAt: timestamp("expires_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }).notNull(),
  },
  (columns) => ({
    _orderIdx: index("users_sessions_order_idx").on(columns._order),
    _parentIDIdx: index("users_sessions_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [users.id],
      name: "users_sessions_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const users = pgTable(
  "users",
  {
    id: serial("id").primaryKey(),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    email: varchar("email").notNull(),
    resetPasswordToken: varchar("reset_password_token"),
    resetPasswordExpiration: timestamp("reset_password_expiration", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar("salt"),
    hash: varchar("hash"),
    loginAttempts: numeric("login_attempts").default("0"),
    lockUntil: timestamp("lock_until", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
  },
  (columns) => ({
    users_updated_at_idx: index("users_updated_at_idx").on(columns.updatedAt),
    users_created_at_idx: index("users_created_at_idx").on(columns.createdAt),
    users_email_idx: uniqueIndex("users_email_idx").on(columns.email),
  }),
);

export const payload_locked_documents = pgTable(
  "payload_locked_documents",
  {
    id: serial("id").primaryKey(),
    globalSlug: varchar("global_slug"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index(
      "payload_locked_documents_global_slug_idx",
    ).on(columns.globalSlug),
    payload_locked_documents_updated_at_idx: index(
      "payload_locked_documents_updated_at_idx",
    ).on(columns.updatedAt),
    payload_locked_documents_created_at_idx: index(
      "payload_locked_documents_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const payload_locked_documents_rels = pgTable(
  "payload_locked_documents_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    toolsID: integer("tools_id"),
    mediaID: integer("media_id"),
    usersID: integer("users_id"),
  },
  (columns) => ({
    order: index("payload_locked_documents_rels_order_idx").on(columns.order),
    parentIdx: index("payload_locked_documents_rels_parent_idx").on(
      columns.parent,
    ),
    pathIdx: index("payload_locked_documents_rels_path_idx").on(columns.path),
    payload_locked_documents_rels_tools_id_idx: index(
      "payload_locked_documents_rels_tools_id_idx",
    ).on(columns.toolsID),
    payload_locked_documents_rels_media_id_idx: index(
      "payload_locked_documents_rels_media_id_idx",
    ).on(columns.mediaID),
    payload_locked_documents_rels_users_id_idx: index(
      "payload_locked_documents_rels_users_id_idx",
    ).on(columns.usersID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [payload_locked_documents.id],
      name: "payload_locked_documents_rels_parent_fk",
    }).onDelete("cascade"),
    toolsIdFk: foreignKey({
      columns: [columns["toolsID"]],
      foreignColumns: [tools.id],
      name: "payload_locked_documents_rels_tools_fk",
    }).onDelete("cascade"),
    mediaIdFk: foreignKey({
      columns: [columns["mediaID"]],
      foreignColumns: [media.id],
      name: "payload_locked_documents_rels_media_fk",
    }).onDelete("cascade"),
    usersIdFk: foreignKey({
      columns: [columns["usersID"]],
      foreignColumns: [users.id],
      name: "payload_locked_documents_rels_users_fk",
    }).onDelete("cascade"),
  }),
);

export const payload_preferences = pgTable(
  "payload_preferences",
  {
    id: serial("id").primaryKey(),
    key: varchar("key"),
    value: jsonb("value"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_preferences_key_idx: index("payload_preferences_key_idx").on(
      columns.key,
    ),
    payload_preferences_updated_at_idx: index(
      "payload_preferences_updated_at_idx",
    ).on(columns.updatedAt),
    payload_preferences_created_at_idx: index(
      "payload_preferences_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const payload_preferences_rels = pgTable(
  "payload_preferences_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    usersID: integer("users_id"),
  },
  (columns) => ({
    order: index("payload_preferences_rels_order_idx").on(columns.order),
    parentIdx: index("payload_preferences_rels_parent_idx").on(columns.parent),
    pathIdx: index("payload_preferences_rels_path_idx").on(columns.path),
    payload_preferences_rels_users_id_idx: index(
      "payload_preferences_rels_users_id_idx",
    ).on(columns.usersID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [payload_preferences.id],
      name: "payload_preferences_rels_parent_fk",
    }).onDelete("cascade"),
    usersIdFk: foreignKey({
      columns: [columns["usersID"]],
      foreignColumns: [users.id],
      name: "payload_preferences_rels_users_fk",
    }).onDelete("cascade"),
  }),
);

export const payload_migrations = pgTable(
  "payload_migrations",
  {
    id: serial("id").primaryKey(),
    name: varchar("name"),
    batch: numeric("batch"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index(
      "payload_migrations_updated_at_idx",
    ).on(columns.updatedAt),
    payload_migrations_created_at_idx: index(
      "payload_migrations_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const relations_tools = relations(tools, ({ one }) => ({
  image_link: one(media, {
    fields: [tools.image_link],
    references: [media.id],
    relationName: "image_link",
  }),
  dpa_file: one(media, {
    fields: [tools.dpa_file],
    references: [media.id],
    relationName: "dpa_file",
  }),
}));
export const relations__tools_v = relations(_tools_v, ({ one }) => ({
  parent: one(tools, {
    fields: [_tools_v.parent],
    references: [tools.id],
    relationName: "parent",
  }),
  version_image_link: one(media, {
    fields: [_tools_v.version_image_link],
    references: [media.id],
    relationName: "version_image_link",
  }),
  version_dpa_file: one(media, {
    fields: [_tools_v.version_dpa_file],
    references: [media.id],
    relationName: "version_dpa_file",
  }),
}));
export const relations_media = relations(media, () => ({}));
export const relations_users_sessions = relations(
  users_sessions,
  ({ one }) => ({
    _parentID: one(users, {
      fields: [users_sessions._parentID],
      references: [users.id],
      relationName: "sessions",
    }),
  }),
);
export const relations_users = relations(users, ({ many }) => ({
  sessions: many(users_sessions, {
    relationName: "sessions",
  }),
}));
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: "_rels",
    }),
    toolsID: one(tools, {
      fields: [payload_locked_documents_rels.toolsID],
      references: [tools.id],
      relationName: "tools",
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: "media",
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: "users",
    }),
  }),
);
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: "_rels",
    }),
  }),
);
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: "_rels",
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: "users",
    }),
  }),
);
export const relations_payload_preferences = relations(
  payload_preferences,
  ({ many }) => ({
    _rels: many(payload_preferences_rels, {
      relationName: "_rels",
    }),
  }),
);
export const relations_payload_migrations = relations(
  payload_migrations,
  () => ({}),
);

type DatabaseSchema = {
  tools: typeof tools;
  _tools_v: typeof _tools_v;
  media: typeof media;
  users_sessions: typeof users_sessions;
  users: typeof users;
  payload_locked_documents: typeof payload_locked_documents;
  payload_locked_documents_rels: typeof payload_locked_documents_rels;
  payload_preferences: typeof payload_preferences;
  payload_preferences_rels: typeof payload_preferences_rels;
  payload_migrations: typeof payload_migrations;
  relations_tools: typeof relations_tools;
  relations__tools_v: typeof relations__tools_v;
  relations_media: typeof relations_media;
  relations_users_sessions: typeof relations_users_sessions;
  relations_users: typeof relations_users;
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels;
  relations_payload_locked_documents: typeof relations_payload_locked_documents;
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels;
  relations_payload_preferences: typeof relations_payload_preferences;
  relations_payload_migrations: typeof relations_payload_migrations;
};

declare module "@payloadcms/db-postgres" {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema;
  }
}
